!function (e) { "use strict"; var t = "data-highlighted", n = "data-timestamp", i = { ELEMENT_NODE: 1, TEXT_NODE: 3 }, o = ["SCRIPT", "STYLE", "SELECT", "OPTION", "BUTTON", "OBJECT", "APPLET", "VIDEO", "AUDIO", "CANVAS", "EMBED", "PARAM", "METER", "PROGRESS"]; function r(e, t) { return a(e).color() === a(t).color() } function l(e, t) { for (var n in e = e || {}, t) t.hasOwnProperty(n) && void 0 === e[n] && (e[n] = t[n]); return e } function s(e, t) { e.sort(function (e, n) { return a(t ? n : e).parents().length - a(t ? e : n).parents().length }) } var a = function (e) { return { addClass: function (t) { e.classList ? e.classList.add(t) : e.className += " " + t }, removeClass: function (t) { e.classList ? e.classList.remove(t) : e.className = e.className.replace(new RegExp("(^|\\b)" + t + "(\\b|$)", "gi"), " ") }, prepend: function (t) { for (var n = Array.prototype.slice.call(t), i = n.length; i--;)e.insertBefore(n[i], e.firstChild) }, append: function (t) { for (var n = Array.prototype.slice.call(t), i = 0, o = n.length; i < o; ++i)e.appendChild(n[i]) }, insertAfter: function (t) { return t.parentNode.insertBefore(e, t.nextSibling) }, insertBefore: function (t) { return t.parentNode.insertBefore(e, t) }, remove: function () { e.parentNode.removeChild(e), e = null }, contains: function (t) { return e !== t && e.contains(t) }, wrap: function (t) { return e.parentNode && e.parentNode.insertBefore(t, e), t.appendChild(e), t }, unwrap: function () { var t, n = Array.prototype.slice.call(e.childNodes); return n.forEach(function (e) { t = e.parentNode, a(e).insertBefore(e.parentNode), a(t).remove() }), n }, parents: function () { for (var t, n = []; t = e.parentNode;)n.push(t), e = t; return n }, normalizeTextNodes: function () { if (e) { if (e.nodeType === i.TEXT_NODE) for (; e.nextSibling && e.nextSibling.nodeType === i.TEXT_NODE;)e.nodeValue += e.nextSibling.nodeValue, e.parentNode.removeChild(e.nextSibling); else a(e.firstChild).normalizeTextNodes(); a(e.nextSibling).normalizeTextNodes() } }, color: function () { return e.style.backgroundColor }, fromHTML: function (e) { var t = document.createElement("div"); return t.innerHTML = e, t.childNodes }, getRange: function () { var t, n = a(e).getSelection(); return n.rangeCount > 0 && (t = n.getRangeAt(0)), t }, removeAllRanges: function () { a(e).getSelection().removeAllRanges() }, getSelection: function () { return a(e).getWindow().getSelection() }, getWindow: function () { return a(e).getDocument().defaultView }, getDocument: function () { return e.ownerDocument || e } } }; function h(e, t) { if (!e) throw "Missing anchor element"; var n, i; this.el = e, this.options = l(t, { color: "#ffff7b", highlightedClass: "highlighted", contextClass: "highlighter-context", onRemoveHighlight: function () { return !0 }, onBeforeHighlight: function () { return !0 }, onAfterHighlight: function () { } }), a(this.el).addClass(this.options.contextClass), n = this.el, i = this, n.addEventListener("contextmenu", function (e) { return i.doHighlight(), e.preventDefault(), !1 }), n.addEventListener("touchend", i.highlightHandler.bind(i)) } h.prototype.destroy = function () { var e, t; e = this.el, t = this, e.removeEventListener("contextmenu", function (e) { return t.doHighlight(), e.preventDefault(), !1 }), e.removeEventListener("touchend", t.highlightHandler.bind(t)), a(this.el).removeClass(this.options.contextClass) }, h.prototype.highlightHandler = function () { this.doHighlight() }, h.prototype.doHighlight = function (e, t) { var i, o, r, l, s = a(this.el).getRange(); s && !s.collapsed && (!0 === this.options.onBeforeHighlight(s) && (l = +new Date, (i = h.createWrapper(this.options)).setAttribute(n, l), o = this.highlightRange(s, i), r = this.normalizeHighlights(o), this.options.onAfterHighlight(s, r, l)), e || a(this.el).removeAllRanges()) }, h.prototype.highlightRange = function (e, n) { if (!e || e.collapsed) return []; var r, l, s, h = function (e) { var t = e.startContainer, n = e.endContainer, o = e.commonAncestorContainer, r = !0; if (0 === e.endOffset) { for (; !n.previousSibling && n.parentNode !== o;)n = n.parentNode; n = n.previousSibling } else n.nodeType === i.TEXT_NODE ? e.endOffset < n.nodeValue.length && n.splitText(e.endOffset) : e.endOffset > 0 && (n = n.childNodes.item(e.endOffset - 1)); return t.nodeType === i.TEXT_NODE ? e.startOffset === t.nodeValue.length ? r = !1 : e.startOffset > 0 && n === (t = t.splitText(e.startOffset)).previousSibling && (n = t) : t = e.startOffset < t.childNodes.length ? t.childNodes.item(e.startOffset) : t.nextSibling, { startContainer: t, endContainer: n, goDeeper: r } }(e), u = h.startContainer, c = h.endContainer, f = h.goDeeper, d = !1, g = u, p = []; do { f && g.nodeType === i.TEXT_NODE && (-1 === o.indexOf(g.parentNode.tagName) && "" !== g.nodeValue.trim() && ((l = n.cloneNode(!0)).setAttribute(t, !0), s = g.parentNode, (a(this.el).contains(s) || s === this.el) && (r = a(g).wrap(l), p.push(r))), f = !1), g !== c || c.hasChildNodes() && f || (d = !0), g.tagName && o.indexOf(g.tagName) > -1 && (c.parentNode === g && (d = !0), f = !1), f && g.hasChildNodes() ? g = g.firstChild : g.nextSibling ? (g = g.nextSibling, f = !0) : (g = g.parentNode, f = !1) } while (!d); return p }, h.prototype.normalizeHighlights = function (e) { var t; return this.flattenNestedHighlights(e), this.mergeSiblingHighlights(e), t = e.filter(function (e) { return e.parentElement ? e : null }), (t = t.filter(function (e, t, n) { return n.indexOf(e) === t })).sort(function (e, t) { return e.offsetTop - t.offsetTop || e.offsetLeft - t.offsetLeft }), t }, h.prototype.flattenNestedHighlights = function (e) { var t, n = this; function i() { var t = !1; return e.forEach(function (i, o) { var l = i.parentElement, s = l.previousSibling, h = l.nextSibling; n.isHighlight(l) && (r(l, i) ? (l.replaceChild(i.firstChild, i), e[o] = l, t = !0) : (i.nextSibling || (a(i).insertBefore(h || l), t = !0), i.previousSibling || (a(i).insertAfter(s || l), t = !0), l.hasChildNodes() || a(l).remove())) }), t } s(e, !0); do { t = i() } while (t) }, h.prototype.mergeSiblingHighlights = function (e) { var t = this; function n(e, n) { return n && n.nodeType === i.ELEMENT_NODE && r(e, n) && t.isHighlight(n) } e.forEach(function (e) { var t = e.previousSibling, i = e.nextSibling; n(e, t) && (a(e).prepend(t.childNodes), a(t).remove()), n(e, i) && (a(e).append(i.childNodes), a(i).remove()), a(e).normalizeTextNodes() }) }, h.prototype.setColor = function (e) { this.options.color = e }, h.prototype.getColor = function () { return this.options.color }, h.prototype.removeHighlights = function (e) { var t = e || this.el, n = this.getHighlights({ container: t }), o = this; function r(e) { a(e).unwrap().forEach(function (e) { var t, n, o; n = (t = e).previousSibling, o = t.nextSibling, n && n.nodeType === i.TEXT_NODE && (t.nodeValue = n.nodeValue + t.nodeValue, a(n).remove()), o && o.nodeType === i.TEXT_NODE && (t.nodeValue = t.nodeValue + o.nodeValue, a(o).remove()) }) } s(n, !0), n.forEach(function (e) { !0 === o.options.onRemoveHighlight(e) && r(e) }) }, h.prototype.getHighlights = function (e) { var i = (e = l(e, { container: this.el, andSelf: !0, grouped: !1 })).container.querySelectorAll("[" + t + "]"), o = Array.prototype.slice.call(i); return !0 === e.andSelf && e.container.hasAttribute(t) && o.push(e.container), e.grouped && (o = function (e) { var t = [], i = {}, o = []; return e.forEach(function (e) { var o = e.getAttribute(n); void 0 === i[o] && (i[o] = [], t.push(o)), i[o].push(e) }), t.forEach(function (e) { var t = i[e]; o.push({ chunks: t, timestamp: e, toString: function () { return t.map(function (e) { return e.textContent }).join("") } }) }), o }(o)), o }, h.prototype.isHighlight = function (e) { return e && e.nodeType === i.ELEMENT_NODE && e.hasAttribute(t) }, h.prototype.serializeHighlights = function () { var e = this.getHighlights(), t = this.el, n = []; return s(e, !1), e.forEach(function (e) { var o = 0, r = e.textContent.length, l = function (e, t) { var n, i = []; do { n = Array.prototype.slice.call(e.parentNode.childNodes), i.unshift(n.indexOf(e)), e = e.parentNode } while (e !== t || !e); return i }(e, t), s = e.cloneNode(!0); s.innerHTML = "", s = s.outerHTML, e.previousSibling && e.previousSibling.nodeType === i.TEXT_NODE && (o = e.previousSibling.length), n.push([s, e.textContent, l.join(":"), o, r]) }), JSON.stringify(n) }, h.prototype.deserializeHighlights = function (e) { var t, n = [], o = this; if (!e) return n; try { t = JSON.parse(e) } catch (e) { throw "Can't parse JSON: " + e } return t.forEach(function (e) { try { !function (e) { for (var t, r, l, s = { wrapper: e[0], text: e[1], path: e[2].split(":"), offset: e[3], length: e[4] }, h = s.path.pop(), u = o.el; l = s.path.shift();)u = u.childNodes[l]; u.childNodes[h - 1] && u.childNodes[h - 1].nodeType === i.TEXT_NODE && (h -= 1), (t = (u = u.childNodes[h]).splitText(s.offset)).splitText(s.length), t.nextSibling && !t.nextSibling.nodeValue && a(t.nextSibling).remove(), t.previousSibling && !t.previousSibling.nodeValue && a(t.previousSibling).remove(), r = a(t).wrap(a().fromHTML(s.wrapper)[0]), n.push(r) }(e) } catch (e) { console && console.warn && console.warn("Can't deserialize highlight descriptor. Cause: " + e) } }), n }, h.prototype.find = function (e, t) { var n = a(this.el).getWindow(), i = n.scrollX, o = n.scrollY, r = void 0 === t || t; if (a(this.el).removeAllRanges(), n.find) for (; n.find(e, r);)this.doHighlight(!0); else if (n.document.body.createTextRange) { var l = n.document.body.createTextRange(); for (l.moveToElementText(this.el); l.findText(e, 1, r ? 4 : 0) && (a(this.el).contains(l.parentElement()) || l.parentElement() === this.el);)l.select(), this.doHighlight(!0), l.collapse(!1) } a(this.el).removeAllRanges(), n.scrollTo(i, o) }, h.createWrapper = function (e) { var t = document.createElement("span"); return t.style.backgroundColor = e.color, t.className = e.highlightedClass, t }, e.TextHighlighter = h }(window);; (function ($) {
    $(document).ready(function () {
        if ($('body').hasClass('page-node')) {
            var review_mode = false; $('.ielts-node-question-wrapper').each(function () { if ($(this)[0].hasAttribute("data-user_answers")) { review_mode = true; return false; } }); if (!review_mode) { runHighlight(); }
            $('.restart-test').on('click', function (e) { runHighlight(); });
        }
        else { runHighlight(); }
        function runHighlight() {
            var states = {}; var highlight_options_html = "<div class='highlight-options z-depth-2 hide no-transition'><a href='#' class='highlight-link highlight-note-btn'><i class='material-icons material-middle md-18 yellow-text text-darken-2'>edit</i> Notes</a><a href='#' class='highlight-link highlight-only'><i class='material-icons material-middle md-18 blue-text text-darken-2'>brush</i> Highlight</a><a href='#' class='highlight-link remove-highlight hide'><i class='material-icons material-middle md-18 red-text text lighten-3'>remove_circle_outline</i> Clear</a><a href='#' class='remove-all-highlights hide'><i class='material-icons material-middle md-18 red-text text-darken-1'>clear</i> Clear all</a></div>"; var tempHighlighters = {}; var passage_container = '.ielts-reading-passage, .ielts-reading-questions, #ielts-listening-questions-div'; function saveState(id) { var html = $('#' + id).html(); states[id].push(html); }
            function gotoLastestState(id) { var statesSize = states[id].length; $('#' + id).html(states[id][statesSize - 1]); }
            function setHighlight(timestamp, tempHighlighters) { delete tempHighlighters[timestamp]; var $highlight = $('.highlighted[data-timestamp="' + timestamp + '"]'); $highlight.css('background-color', '#ffff7b').removeClass('white-text highlight-temp').addClass('highlight-ready'); }
            function showOptions($p, x, y) { if ($p.find('.highlight-options').hasClass('hide')) { $p.find('.highlight-options').removeClass('hide').css({ top: y, left: x }); } }
            function hideOptions($p) { $p.find('.highlight-options').addClass('hide'); }
            function showNotePad(highlight) { $('.highlighted').not(highlight).removeClass('active'); $('.highlight-note').not($(highlight).find('.highlight-note')[0]).hide(); var highlightNote = $(highlight).find('.highlight-note'); if (highlightNote.length && !highlightNote.is(':visible')) { $(highlight).addClass('active'); highlightNote.show(); } }
            function containsNodeText(range, node) {
                function acceptNode() { return NodeFilter.FILTER_ACCEPT; }
                const safeFilter = acceptNode; safeFilter.acceptNode = acceptNode; var treeWalker = document.createTreeWalker(node, NodeFilter.SHOW_TEXT, safeFilter, false); var firstTextNode, lastTextNode, textNode; while (treeWalker.nextNode()) {
                    var textNode = treeWalker.nextNode(); if (!firstTextNode) { firstTextNode = textNode; }
                    lastTextNode = textNode;
                }
                var nodeRange = range.cloneRange(); if (firstTextNode) { nodeRange.setStart(firstTextNode, 0); nodeRange.setEnd(lastTextNode, lastTextNode.length); } else { nodeRange.selectNodeContents(node); }
                return range.compareBoundaryPoints(Range.START_TO_START, nodeRange) < 1 && range.compareBoundaryPoints(Range.END_TO_END, nodeRange) > -1;
            }
            if ($(passage_container).length) {
                if ($('.ielts-reading-passage').length) {
                    $('.ielts-reading-passage').find('p').each(function () {
                        if ($(this).attr('style') && $(this).attr('style').length > 0 && $(this).attr('style').indexOf('text-align: center') !== -1) { return true; }
                        $('.ielts-reading-passage').find('.answer-locate-part').each(function () { $(this).replaceWith($(this).text()); }); var boldedText = ''; var $p = $(this); $p.find('*').each(function (i) {
                            if ($(this).attr('style') && $(this).attr('style').length > 0 && $(this).attr('style').indexOf('font-weight: 700;') !== -1) {
                                if ($p.text() == $(this).text()) { boldedText = $(this).text(); return false; }
                                else { boldedText += $(this).text(); }
                            }
                            else { if ($p.text() != $(this).text()) { return false; } }
                        }); if (boldedText !== '' && $p.text().indexOf(boldedText) === 0) {
                            if (boldedText === $p.text()) { return true; }
                            else { var html = '<strong>' + boldedText + '</strong> '; var re = new RegExp(String.fromCharCode(160), "g"); html += $p.text().slice(boldedText.length, $p.text().length).replace(/\u00A0/g, ' ').replace(re, ' '); $p.html(html); }
                        }
                        else { $p.html($(this).text().replace(/\u00A0/g, '')); }
                    });
                }
                if (document.location.hostname != 'www.bestmytestdev.com') { $(passage_container).contextmenu(function () { return false; }); }
                $(passage_container).each(function () {
                    var $passage = $(this); var passage = this; $passage.append(highlight_options_html); $passage.find('table td').css('overflow', 'visible'); $passage.uniqueId(); if (states[$passage.attr('id')] === undefined) { states[$passage.attr('id')] = []; states[$passage.attr('id')].push($passage.html()); }
                    function handleEventClick(e, $this) {
                        $e = $(e.target); if ($e.hasClass('highlighted')) {
                            switch (event.which) {
                                case 1: showNotePad($e[0]); break; case 3: var eOffset = $e.offset(); var parentOffset = $e.closest(passage_container).offset(); var relX = eOffset.left - parentOffset.left - 60; var relY = eOffset.top - parentOffset.top + 20; if (relX < 0) { relX = 5; }
                                    if (relY < 0) { relY = 5; }
                                    if ($passage.find('.highlight-options').find('*').hasClass('highlighted')) { $passage.find('.highlight-options').find('.highlighted').each(function () { var text = $(this).text(); $(this).replaceWith(text); }); }
                                    showOptions($passage, relX, relY); $('.highlight-link').attr('href', $e.data('timestamp')); if ($this.hasClass('highlight-temp')) { $('.remove-highlight, .remove-all-highlights').addClass('hide'); $('.highlight-only').removeClass('hide'); }
                                    else { $('.remove-highlight, .remove-all-highlights').removeClass('hide'); $('.highlight-only').addClass('hide'); }
                                default: break;
                            }
                        }
                        else if ($e.hasClass('highlight-note-toggle')) {
                            var highlightNote = $this.find('.highlight-note'); if (highlightNote.length) { $this.removeClass('active'); highlightNote.hide(); }
                            saveState($this.parents(passage_container).attr('id'));
                        }
                    }
                    var highlighter = new TextHighlighter(passage, {
                        color: '#3297FD', highlightedClass: 'highlighted cursor-pointer disSelectable highlight-temp white-text relative', onBeforeHighlight: function (range) {
                            var userSelection; var selectExistingHighlights = false; if (window.getSelection) { userSelection = window.getSelection(); }
                            else if (document.selection) { userSelection = document.selection.createRange(); }
                            if (userSelection.containsNode) { $passage.find('.highlighted').each(function () { if (userSelection.containsNode($(this)[0])) { selectExistingHighlights = true; return false; } }); }
                            else { $passage.find('.highlighted').each(function () { var range = userSelection.getRangeAt(0); if (containsNodeText(range, $(this)[0])) { selectExistingHighlights = true; return false; } }); }
                            if (selectExistingHighlights) { return false; }
                            return true;
                        }, onAfterHighlight: function (range, highlights) {
                            if (highlights && highlights.length > 1) {
                                for (var i in highlights) { if (highlights[i]) { highlighter.removeHighlights(highlights[i]); } }
                                return false;
                            }
                            var highlight = highlights[0]; if (!(highlight && $(highlight).attr('data-timestamp'))) { return false; }
                            if ($(highlight).find('.highlighted').length > 0) { return false; }
                            setTimeout(function () { var timestamp = $(highlight).attr('data-timestamp'); tempHighlighters[timestamp] = timestamp; }, 250); $(highlight).uniqueId(); var highlightElem = '#' + $(highlight).attr('id'), tempEvent = { which: 3, target: highlightElem }; handleEventClick(tempEvent, $(highlightElem)); $('body').on('mousedown click', highlightElem, function (e) { handleEventClick(e, $(this)); });
                        }, onRemoveHighlight: function (highlights) { $(highlights).each(function () { $(this).off('click'); delete tempHighlighters[$(this).attr('data-timestamp')]; }); hideOptions($passage); return true; }
                    }); $('body, html').on('click', function (e) {
                        var $e = $(e.target); if (!$e.hasClass('highlight-temp')) { for (timestamp in tempHighlighters) { var highlightTemp = $('.highlighted[data-timestamp="' + timestamp + '"]')[0]; if (highlightTemp) { highlighter.removeHighlights(highlightTemp); } } }
                        if (!$e.hasClass('highlighted') && !$e.hasClass('highlight-options')) { hideOptions($(passage_container)); }
                    }); $('body').on('click', '.highlight-only', function (e) { e.preventDefault(); setHighlight($(this).attr('href'), tempHighlighters); hideOptions($(this).parents(passage_container)); saveState($(this).parents(passage_container).attr('id')); return false; }); $('body').on('click', '.highlight-note-btn', function (e) {
                        e.preventDefault(); setHighlight($(this).attr('href'), tempHighlighters); var $highlight = $('.highlighted[data-timestamp="' + $(this).attr('href') + '"]'); if ($highlight.find('.highlight-note').length) { var $note = $highlight.find('.highlight-note'); if (!$note.is(':visible')) { showNotePad($highlight[0]); } }
                        else { $highlight.append('<span class="highlight-note no-transition"><span class="highlight-note-header"><a href="#" class="highlight-note-toggle circle red white-text">X</a></span><textarea class="highlight-note-text" value="" placeholder="Write notes here..."></textarea></span><span class="highlight-note-notify circle"></span>').addClass('active'); var $note = $highlight.find('.highlight-note'); var hl = $note.offset().left; var bl = $highlight.closest('.practice-page-box').offset().left; if (hl < bl) { var move_right = Math.ceil(hl - bl) - 1; $note.css('right', move_right + 'px'); } }
                        hideOptions($(this).parents(passage_container)); saveState($(this).parents(passage_container).attr('id')); return false;
                    }); $('body').on('click', '.remove-highlight', function (e) {
                        e.preventDefault(); var $highlight = $('.highlighted[data-timestamp="' + $(this).attr('href') + '"]'); if ($highlight.length) { $highlight.find('.highlight-note, .highlight-note-notify').remove(); highlighter.removeHighlights($highlight[0]); }
                        hideOptions($(this).parents(passage_container)); saveState($(this).parents(passage_container).attr('id')); return false;
                    }); $('body').on('click', '.remove-all-highlights', function (e) { e.preventDefault(); $('.highlight-note, .highlight-note-notify').remove(); var highlights = $(this).closest(passage_container)[0]; highlighter.removeHighlights(highlights); hideOptions($(this).parents(passage_container)); saveState($(this).parents(passage_container).attr('id')); return false; }); $('body').on('change', '.highlight-note-text', function (e) { var val = $(this).val(); $(this).attr('data-value', val); saveState($(this).parents(passage_container).attr('id')); });
                });
            }
        }
    });
})(jQuery);; (function ($) {
    $(document).ready(function () {
        var $free_trial_modal = $('.free-trial-signup-modal-open'); if ($free_trial_modal.hasClass('set-blur')) { $('.modal-close, .close').on('click', function () { $('.blur').removeClass('blur'); }); }
        function openFreeTrialModal() { var options = { dismissible: false, opacity: 0.8, complete: function () { $('.blur').removeClass('blur'); } }; if ($free_trial_modal.length > 0) { $free_trial_modal.openModal(options); } }
        var href = window.location.href; var parts = href.split('/'); var last = parts.pop(); if ($free_trial_modal.attr('data-openStyle') === 'timer') { var time = 15000; var time = 1000; var showFreeTrialModal; var xButtonClosed = false; showFreeTrialModal = setTimeout(function () { openFreeTrialModal(); }, time); $(window).bind('mousewheel DOMMouseScroll', function (event) { clearTimeout(showFreeTrialModal); if (!xButtonClosed) { showFreeTrialModal = setTimeout(function () { openFreeTrialModal(); }, time); } }); }
        else { var btn_id = $free_trial_modal.attr('data-openStyle'); $(btn_id).on('click', function (e) { e.preventDefault(); openFreeTrialModal(); return false; }) }
        $('.overlay-dark-close').on('click', function (e) { e.preventDefault(); $('.free-trial-signup-modal').closeModal(); xButtonClosed = true; clearTimeout(showFreeTrialModal); return false; }); $('.free-trial-modal-form  input[type="submit"]').on('click', function (e) {
            e.preventDefault(); var $holder = $(this).parents('.free-trial-modal-form'); var email = $.trim($holder.find('input[name="email"]').val()), pass = $.trim($holder.find('input[name="password"]').val()), $btn = $(this), value = $btn.val(); var $msg_holder = $holder.find('.result-msg'); if (!email && !pass) { $msg_holder.html('Please enter an email address & password'); return false; }
            if (!email) { $msg_holder.html('Please enter an email address'); return false; }
            if (!pass) { $msg_holder.html('Please enter a password'); return false; }
            if (pass.length > 25) { $msg_holder.html('Password too long; 25 max characters'); return false; }
            $this_form = $(this).parents('form'); $.ajax({
                url: "/free-trial/email-check/ajax", method: "POST", data: { email: email }, dataType: "json", beforeSend: function () { $btn.val('Registering...'); $btn.attr('disabled', 'disabled'); }, success: function (data) {
                    if (data.result) { $this_form.submit(); }
                    else { $msg_holder.html(data.msg); $btn.val(value); $btn.removeAttr('disabled'); }
                }
            });
        });
    });
})(jQuery);;